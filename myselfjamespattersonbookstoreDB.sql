--
-- CREATE DATABASE myself_jamespatterson_bookstore;
-- USE myself_jamespatterson_bookstore;
-- CREATE TABLE book (
--     book_id INT AUTO_INCREMENT PRIMARY KEY,
--     title VARCHAR(255) NOT NULL,
--     publication_year YEAR,
--     language_id INT,
--     publisher_id INT,
--     price DECIMAL(10,2),
--     stock_quantity INT
-- );
-- below is authors though mostly James Patterson, this can help if he co-authors.
-- CREATE TABLE author (
--     author_id INT AUTO_INCREMENT PRIMARY KEY,
--     full_name VARCHAR(255) NOT NULL
-- );
-- create a table with many to many link between books and authors
-- CREATE TABLE book_author (
--     book_id INT,
--     author_id INT,
--     PRIMARY KEY (book_id, author_id),
--     FOREIGN KEY (book_id) REFERENCES book(book_id),
--     FOREIGN KEY (author_id) REFERENCES author(author_id)
-- );
-- table for book language
-- CREATE TABLE book_language (
--     language_id INT AUTO_INCREMENT PRIMARY KEY,
--     language_name VARCHAR(100) NOT NULL
-- );
-- table for publisher
-- CREATE TABLE publisher (
--     publisher_id INT AUTO_INCREMENT PRIMARY KEY,
--     publisher_name VARCHAR(255) NOT NULL
-- );
-- table for customers
-- CREATE TABLE customer (
--     customer_id INT AUTO_INCREMENT PRIMARY KEY,
--     full_name VARCHAR(255),
--     email VARCHAR(255) UNIQUE,
--     phone VARCHAR(20)
-- );
-- follow this order
-- CREATE TABLE country (
--     country_id INT AUTO_INCREMENT PRIMARY KEY,
--     country_name VARCHAR(100)
-- );
-- CREATE TABLE order_status (
--     order_status_id INT AUTO_INCREMENT PRIMARY KEY,
--     status_name VARCHAR(100)
-- );
-- CREATE TABLE address_status (
--     address_status_id INT AUTO_INCREMENT PRIMARY KEY,
--     status_name VARCHAR(50)
-- );
-- CREATE TABLE shipping_method (
--     shipping_method_id INT AUTO_INCREMENT PRIMARY KEY,
--     method_name VARCHAR(100),
--     cost DECIMAL(10,2)
-- );
-- above should be run first and all together since they have no foreign keys
-- CREATE TABLE address (
--     address_id INT AUTO_INCREMENT PRIMARY KEY,
--     street VARCHAR(255),
--     city VARCHAR(100),
--     postal_code VARCHAR(20),
--     country_id INT,
--     FOREIGN KEY (country_id) REFERENCES country(country_id)
-- );

-- table for customers address
-- CREATE TABLE customer_address (
--     customer_address_id INT AUTO_INCREMENT PRIMARY KEY,
--     customer_id INT,
--     address_id INT,
--     address_status_id INT,
--     FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
--     FOREIGN KEY (address_id) REFERENCES address(address_id),
--     FOREIGN KEY (address_status_id) REFERENCES address_status(address_status_id)
-- );

-- CREATE TABLE cust_order (
--     order_id INT AUTO_INCREMENT PRIMARY KEY,
--     customer_id INT,
--     order_date DATE,
--     shipping_method_id INT,
--     order_status_id INT,
--     FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
--     FOREIGN KEY (shipping_method_id) REFERENCES shipping_method(shipping_method_id),
--     FOREIGN KEY (order_status_id) REFERENCES order_status(order_status_id)
-- );
-- CREATE TABLE order_line (
--     order_line_id INT AUTO_INCREMENT PRIMARY KEY,
--     order_id INT,
--     book_id INT,
--     quantity INT,
--     price DECIMAL(10,2),
--     FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
--     FOREIGN KEY (book_id) REFERENCES book(book_id)
-- );

-- CREATE TABLE order_history (
--     history_id INT AUTO_INCREMENT PRIMARY KEY,
--     order_id INT,
--     status_change_date DATETIME,
--     old_status_id INT,
--     new_status_id INT,
--     FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
--     FOREIGN KEY (old_status_id) REFERENCES order_status(order_status_id),
--     FOREIGN KEY (new_status_id) REFERENCES order_status(order_status_id)
-- );




